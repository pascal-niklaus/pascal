% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progress.R
\name{progressInit}
\alias{progressInit}
\alias{progressBar}
\alias{progressStep0}
\alias{progressStep}
\alias{progressPct}
\title{Progress bar}
\usage{
progressInit(steps = 10, pre = "[", post = "]", done = "*",
  spc = "-", maxwidth = 60)

progressBar(step = 0)

progressStep0()

progressStep()

progressPct(step = 0)
}
\arguments{
\item{steps}{The number of steps can be passed in different ways:
1) directly as integer; 2) as vector, in which case the length
of the vector determines the number of steps; 3) as
\code{data.frame} or similar structure, in which case the
extent in the first dimension determines the number of steps.}

\item{pre, post}{Text to draw before and after the bar. Defaults to
'[' and ']'}

\item{spc, done}{characters indicating whether a step is not yet
done (spc) or already completed (done). Default to '-' and '*'.}

\item{maxwidth}{maximum width of the bar on the screen. Defaults to
60.}

\item{step}{Current step (integer ranging from 0 up to the maximum
number of steps).}
}
\description{
This is a simple progress indicator that can be used in loops.
}
\details{
The progress indicator is only active if sinks are inactive (see
\code{enableSink}), i.e. if output is shown on the screen. A
progress bar needs to be initialized with
\code{progressInit}. Then, one can either display it by repeatedly
calling \code{progressBar} with the current step as argument. This
re-draws the entire progress bar on every call. Alternatively, one
might call \code{progressStep0}, which draws the bar, and then call
\code{progressStep} for each step, which will draw single
characters that slowly fill up the pre-drawn bar. The latter also
works with parallelized execution using \code{mclappy}.

(Implementation details: The challenge is for this to work with
parallel processing. I settled on a shared memory object (a
\code{big.matrix}) with a \code{boost.mutex} to ensure exclusive
access.  This does not work under Windows, but then \code{mclapply}
does not fork under Windows either.)
}
\examples{
# step-wise progress:
progressInit(80); progressStep0(); for(i in 1:80) { progressStep(); Sys.sleep(.02); };

# With full bar redrawn for every step:
progressInit(80); for(i in 1:80) { progressBar(i); Sys.sleep(.02); };

# same, but with percentage displayed
progressInit(80); for(i in 1:80) { progressPct(i); Sys.sleep(.02); };

}
\seealso{
\code{\link{enableSink}}
}
\author{
Pascal Niklaus \email{pascal.niklaus@ieu.uzh.ch}
}
